import type { AppConfig, CompanyProfile, TabLabels, FooterDocControl } from "./types";

const STORAGE_KEY = "app-config-v1";
let subscribers: ((config: AppConfig) => void)[] = [];

let current: AppConfig = {
  companyProfile: { name: "" },
  tabLabels: {
    shiftHandover: "Shift-Change Handover Report",
    nonConformance: "Non-conformance Advice",
    maintenance: "Maintenance Job Card",
    complaint: "Complaint Handling",
    settings: "Settings"
  },
  footer: {
    documentNumber: "",
    documentName: "",
    revision: "",
    revisionDate: new Date().toISOString(),
    controlled: true
  }
};

function load() {
  try {
    const stored = localStorage.getItem(STORAGE_KEY);
    if (stored) {
      current = { ...current, ...JSON.parse(stored) };
    }
  } catch {}
}

function persist() {
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(current));
    if (typeof BroadcastChannel !== "undefined") {
      const bc = new BroadcastChannel("app-config");
      bc.postMessage({ type: "sync", config: current });
    }
  } catch {}
}

load();

export function getAppConfig(): AppConfig {
  return current;
}

export function subscribe(fn: (config: AppConfig) => void): () => void {
  subscribers.push(fn);
  fn(current);
  return () => {
    subscribers = subscribers.filter(s => s !== fn);
  };
}

export function updateCompanyProfile(profile: Partial<CompanyProfile>) {
  current.companyProfile = { ...current.companyProfile, ...profile };
  persist();
  subscribers.forEach(s => s(current));
}

export function updateTabLabels(labels: Partial<TabLabels>) {
  current.tabLabels = { ...current.tabLabels, ...labels };
  persist();
  subscribers.forEach(s => s(current));
}

export function updateFooterControl(footer: Partial<FooterDocControl>) {
  const prevRev = current.footer.revision;
  current.footer = { ...current.footer, ...footer };
  if (footer.revision && footer.revision !== prevRev) {
    current.footer.revisionDate = new Date().toISOString();
  }
  persist();
  subscribers.forEach(s => s(current));
}
